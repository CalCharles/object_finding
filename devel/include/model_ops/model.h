// Generated by gencpp from file model_ops/model.msg
// DO NOT EDIT!


#ifndef MODEL_OPS_MESSAGE_MODEL_H
#define MODEL_OPS_MESSAGE_MODEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace model_ops
{
template <class ContainerAllocator>
struct model_
{
  typedef model_<ContainerAllocator> Type;

  model_()
    : length(0)
    , width(0)
    , grid()
    , zumyX(0)
    , zumyY(0)
    , objLstx()
    , objLsty()
    , dirty(false)
    , foundX(0.0)
    , foundY(0.0)  {
    }
  model_(const ContainerAllocator& _alloc)
    : length(0)
    , width(0)
    , grid(_alloc)
    , zumyX(0)
    , zumyY(0)
    , objLstx(_alloc)
    , objLsty(_alloc)
    , dirty(false)
    , foundX(0.0)
    , foundY(0.0)  {
    }



   typedef int32_t _length_type;
  _length_type length;

   typedef int32_t _width_type;
  _width_type width;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _grid_type;
  _grid_type grid;

   typedef int16_t _zumyX_type;
  _zumyX_type zumyX;

   typedef int16_t _zumyY_type;
  _zumyY_type zumyY;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _objLstx_type;
  _objLstx_type objLstx;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _objLsty_type;
  _objLsty_type objLsty;

   typedef uint8_t _dirty_type;
  _dirty_type dirty;

   typedef double _foundX_type;
  _foundX_type foundX;

   typedef double _foundY_type;
  _foundY_type foundY;




  typedef boost::shared_ptr< ::model_ops::model_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::model_ops::model_<ContainerAllocator> const> ConstPtr;

}; // struct model_

typedef ::model_ops::model_<std::allocator<void> > model;

typedef boost::shared_ptr< ::model_ops::model > modelPtr;
typedef boost::shared_ptr< ::model_ops::model const> modelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::model_ops::model_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::model_ops::model_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace model_ops

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'model_ops': ['/home/cc/ee106a/fa15/class/ee106a-as/ros_ws/final_proj/src/model_ops/msg', '/home/cc/ee106a/fa15/class/ee106a-as/ros_ws/final_proj/src/model_ops/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::model_ops::model_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::model_ops::model_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::model_ops::model_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::model_ops::model_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::model_ops::model_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::model_ops::model_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::model_ops::model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4ed87d78b307a07ef906512f662945b";
  }

  static const char* value(const ::model_ops::model_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4ed87d78b307a07ULL;
  static const uint64_t static_value2 = 0xef906512f662945bULL;
};

template<class ContainerAllocator>
struct DataType< ::model_ops::model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "model_ops/model";
  }

  static const char* value(const ::model_ops::model_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::model_ops::model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 length\n\
int32 width\n\
bool[] grid\n\
int16 zumyX\n\
int16 zumyY\n\
int32[] objLstx\n\
int32[] objLsty\n\
bool dirty\n\
float64 foundX\n\
float64 foundY\n\
";
  }

  static const char* value(const ::model_ops::model_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::model_ops::model_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.grid);
      stream.next(m.zumyX);
      stream.next(m.zumyY);
      stream.next(m.objLstx);
      stream.next(m.objLsty);
      stream.next(m.dirty);
      stream.next(m.foundX);
      stream.next(m.foundY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct model_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::model_ops::model_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::model_ops::model_<ContainerAllocator>& v)
  {
    s << indent << "length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "grid[]" << std::endl;
    for (size_t i = 0; i < v.grid.size(); ++i)
    {
      s << indent << "  grid[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.grid[i]);
    }
    s << indent << "zumyX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.zumyX);
    s << indent << "zumyY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.zumyY);
    s << indent << "objLstx[]" << std::endl;
    for (size_t i = 0; i < v.objLstx.size(); ++i)
    {
      s << indent << "  objLstx[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.objLstx[i]);
    }
    s << indent << "objLsty[]" << std::endl;
    for (size_t i = 0; i < v.objLsty.size(); ++i)
    {
      s << indent << "  objLsty[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.objLsty[i]);
    }
    s << indent << "dirty: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dirty);
    s << indent << "foundX: ";
    Printer<double>::stream(s, indent + "  ", v.foundX);
    s << indent << "foundY: ";
    Printer<double>::stream(s, indent + "  ", v.foundY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODEL_OPS_MESSAGE_MODEL_H

// Generated by gencpp from file model_ops/doneWith.msg
// DO NOT EDIT!


#ifndef MODEL_OPS_MESSAGE_DONEWITH_H
#define MODEL_OPS_MESSAGE_DONEWITH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace model_ops
{
template <class ContainerAllocator>
struct doneWith_
{
  typedef doneWith_<ContainerAllocator> Type;

  doneWith_()
    : done(false)
    , withX(0)
    , withY(0)  {
    }
  doneWith_(const ContainerAllocator& _alloc)
    : done(false)
    , withX(0)
    , withY(0)  {
    }



   typedef uint8_t _done_type;
  _done_type done;

   typedef int16_t _withX_type;
  _withX_type withX;

   typedef int16_t _withY_type;
  _withY_type withY;




  typedef boost::shared_ptr< ::model_ops::doneWith_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::model_ops::doneWith_<ContainerAllocator> const> ConstPtr;

}; // struct doneWith_

typedef ::model_ops::doneWith_<std::allocator<void> > doneWith;

typedef boost::shared_ptr< ::model_ops::doneWith > doneWithPtr;
typedef boost::shared_ptr< ::model_ops::doneWith const> doneWithConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::model_ops::doneWith_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::model_ops::doneWith_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace model_ops

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'model_ops': ['/home/cc/ee106a/fa15/class/ee106a-as/ros_ws/final_proj/src/model_ops/msg', '/home/cc/ee106a/fa15/class/ee106a-as/ros_ws/final_proj/src/model_ops/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::model_ops::doneWith_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::model_ops::doneWith_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::model_ops::doneWith_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::model_ops::doneWith_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::model_ops::doneWith_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::model_ops::doneWith_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::model_ops::doneWith_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e020320727b1b65dfc98f52ebbb81459";
  }

  static const char* value(const ::model_ops::doneWith_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe020320727b1b65dULL;
  static const uint64_t static_value2 = 0xfc98f52ebbb81459ULL;
};

template<class ContainerAllocator>
struct DataType< ::model_ops::doneWith_<ContainerAllocator> >
{
  static const char* value()
  {
    return "model_ops/doneWith";
  }

  static const char* value(const ::model_ops::doneWith_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::model_ops::doneWith_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool done\n\
int16 withX\n\
int16 withY\n\
";
  }

  static const char* value(const ::model_ops::doneWith_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::model_ops::doneWith_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.done);
      stream.next(m.withX);
      stream.next(m.withY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct doneWith_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::model_ops::doneWith_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::model_ops::doneWith_<ContainerAllocator>& v)
  {
    s << indent << "done: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.done);
    s << indent << "withX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.withX);
    s << indent << "withY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.withY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODEL_OPS_MESSAGE_DONEWITH_H

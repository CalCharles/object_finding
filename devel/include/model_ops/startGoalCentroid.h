// Generated by gencpp from file model_ops/startGoalCentroid.msg
// DO NOT EDIT!


#ifndef MODEL_OPS_MESSAGE_STARTGOALCENTROID_H
#define MODEL_OPS_MESSAGE_STARTGOALCENTROID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace model_ops
{
template <class ContainerAllocator>
struct startGoalCentroid_
{
  typedef startGoalCentroid_<ContainerAllocator> Type;

  startGoalCentroid_()
    : sx(0)
    , sy(0)
    , gx(0)
    , gy(0)
    , cx(0)
    , cy(0)  {
    }
  startGoalCentroid_(const ContainerAllocator& _alloc)
    : sx(0)
    , sy(0)
    , gx(0)
    , gy(0)
    , cx(0)
    , cy(0)  {
    }



   typedef int16_t _sx_type;
  _sx_type sx;

   typedef int16_t _sy_type;
  _sy_type sy;

   typedef int16_t _gx_type;
  _gx_type gx;

   typedef int16_t _gy_type;
  _gy_type gy;

   typedef int16_t _cx_type;
  _cx_type cx;

   typedef int16_t _cy_type;
  _cy_type cy;




  typedef boost::shared_ptr< ::model_ops::startGoalCentroid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::model_ops::startGoalCentroid_<ContainerAllocator> const> ConstPtr;

}; // struct startGoalCentroid_

typedef ::model_ops::startGoalCentroid_<std::allocator<void> > startGoalCentroid;

typedef boost::shared_ptr< ::model_ops::startGoalCentroid > startGoalCentroidPtr;
typedef boost::shared_ptr< ::model_ops::startGoalCentroid const> startGoalCentroidConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::model_ops::startGoalCentroid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::model_ops::startGoalCentroid_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace model_ops

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'model_ops': ['/home/cc/ee106a/fa15/class/ee106a-as/ros_ws/final_proj/src/model_ops/msg', '/home/cc/ee106a/fa15/class/ee106a-as/ros_ws/final_proj/src/model_ops/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::model_ops::startGoalCentroid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::model_ops::startGoalCentroid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::model_ops::startGoalCentroid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::model_ops::startGoalCentroid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::model_ops::startGoalCentroid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::model_ops::startGoalCentroid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::model_ops::startGoalCentroid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee687726c24eb695f8f49bfda0ca6ce5";
  }

  static const char* value(const ::model_ops::startGoalCentroid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee687726c24eb695ULL;
  static const uint64_t static_value2 = 0xf8f49bfda0ca6ce5ULL;
};

template<class ContainerAllocator>
struct DataType< ::model_ops::startGoalCentroid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "model_ops/startGoalCentroid";
  }

  static const char* value(const ::model_ops::startGoalCentroid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::model_ops::startGoalCentroid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 sx\n\
int16 sy\n\
int16 gx\n\
int16 gy\n\
int16 cx\n\
int16 cy\n\
";
  }

  static const char* value(const ::model_ops::startGoalCentroid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::model_ops::startGoalCentroid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sx);
      stream.next(m.sy);
      stream.next(m.gx);
      stream.next(m.gy);
      stream.next(m.cx);
      stream.next(m.cy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct startGoalCentroid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::model_ops::startGoalCentroid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::model_ops::startGoalCentroid_<ContainerAllocator>& v)
  {
    s << indent << "sx: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sx);
    s << indent << "sy: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sy);
    s << indent << "gx: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gx);
    s << indent << "gy: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gy);
    s << indent << "cx: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cx);
    s << indent << "cy: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODEL_OPS_MESSAGE_STARTGOALCENTROID_H

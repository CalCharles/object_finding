// Generated by gencpp from file image_to_grid/filteredImage.msg
// DO NOT EDIT!


#ifndef IMAGE_TO_GRID_MESSAGE_FILTEREDIMAGE_H
#define IMAGE_TO_GRID_MESSAGE_FILTEREDIMAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace image_to_grid
{
template <class ContainerAllocator>
struct filteredImage_
{
  typedef filteredImage_<ContainerAllocator> Type;

  filteredImage_()
    : image()
    , length(0)
    , width(0)
    , comp_factor(0.0)  {
    }
  filteredImage_(const ContainerAllocator& _alloc)
    : image(_alloc)
    , length(0)
    , width(0)
    , comp_factor(0.0)  {
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _image_type;
  _image_type image;

   typedef int32_t _length_type;
  _length_type length;

   typedef int32_t _width_type;
  _width_type width;

   typedef float _comp_factor_type;
  _comp_factor_type comp_factor;




  typedef boost::shared_ptr< ::image_to_grid::filteredImage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_to_grid::filteredImage_<ContainerAllocator> const> ConstPtr;

}; // struct filteredImage_

typedef ::image_to_grid::filteredImage_<std::allocator<void> > filteredImage;

typedef boost::shared_ptr< ::image_to_grid::filteredImage > filteredImagePtr;
typedef boost::shared_ptr< ::image_to_grid::filteredImage const> filteredImageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::image_to_grid::filteredImage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::image_to_grid::filteredImage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace image_to_grid

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'image_to_grid': ['/home/cc/ee106a/fa15/class/ee106a-as/ros_ws/final_proj/src/image_to_grid/msg', '/home/cc/ee106a/fa15/class/ee106a-as/ros_ws/final_proj/src/image_to_grid/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::image_to_grid::filteredImage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_to_grid::filteredImage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_to_grid::filteredImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_to_grid::filteredImage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_to_grid::filteredImage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_to_grid::filteredImage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::image_to_grid::filteredImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "062cd119e7032c4f31ea925c5820b30a";
  }

  static const char* value(const ::image_to_grid::filteredImage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x062cd119e7032c4fULL;
  static const uint64_t static_value2 = 0x31ea925c5820b30aULL;
};

template<class ContainerAllocator>
struct DataType< ::image_to_grid::filteredImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_to_grid/filteredImage";
  }

  static const char* value(const ::image_to_grid::filteredImage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::image_to_grid::filteredImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool[] image #true is 1, false is 0, convert with im_to_ndarray\n\
int32 length\n\
int32 width\n\
float32 comp_factor\n\
";
  }

  static const char* value(const ::image_to_grid::filteredImage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::image_to_grid::filteredImage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.image);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.comp_factor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct filteredImage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_to_grid::filteredImage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::image_to_grid::filteredImage_<ContainerAllocator>& v)
  {
    s << indent << "image[]" << std::endl;
    for (size_t i = 0; i < v.image.size(); ++i)
    {
      s << indent << "  image[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.image[i]);
    }
    s << indent << "length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "comp_factor: ";
    Printer<float>::stream(s, indent + "  ", v.comp_factor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGE_TO_GRID_MESSAGE_FILTEREDIMAGE_H

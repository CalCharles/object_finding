# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from model_ops/model.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class model(genpy.Message):
  _md5sum = "a4ed87d78b307a07ef906512f662945b"
  _type = "model_ops/model"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 length
int32 width
bool[] grid
int16 zumyX
int16 zumyY
int32[] objLstx
int32[] objLsty
bool dirty
float64 foundX
float64 foundY

"""
  __slots__ = ['length','width','grid','zumyX','zumyY','objLstx','objLsty','dirty','foundX','foundY']
  _slot_types = ['int32','int32','bool[]','int16','int16','int32[]','int32[]','bool','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       length,width,grid,zumyX,zumyY,objLstx,objLsty,dirty,foundX,foundY

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(model, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.length is None:
        self.length = 0
      if self.width is None:
        self.width = 0
      if self.grid is None:
        self.grid = []
      if self.zumyX is None:
        self.zumyX = 0
      if self.zumyY is None:
        self.zumyY = 0
      if self.objLstx is None:
        self.objLstx = []
      if self.objLsty is None:
        self.objLsty = []
      if self.dirty is None:
        self.dirty = False
      if self.foundX is None:
        self.foundX = 0.
      if self.foundY is None:
        self.foundY = 0.
    else:
      self.length = 0
      self.width = 0
      self.grid = []
      self.zumyX = 0
      self.zumyY = 0
      self.objLstx = []
      self.objLsty = []
      self.dirty = False
      self.foundX = 0.
      self.foundY = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.length, _x.width))
      length = len(self.grid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.grid))
      _x = self
      buff.write(_struct_2h.pack(_x.zumyX, _x.zumyY))
      length = len(self.objLstx)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.objLstx))
      length = len(self.objLsty)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.objLsty))
      _x = self
      buff.write(_struct_B2d.pack(_x.dirty, _x.foundX, _x.foundY))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.length, _x.width,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.grid = struct.unpack(pattern, str[start:end])
      self.grid = map(bool, self.grid)
      _x = self
      start = end
      end += 4
      (_x.zumyX, _x.zumyY,) = _struct_2h.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.objLstx = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.objLsty = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 17
      (_x.dirty, _x.foundX, _x.foundY,) = _struct_B2d.unpack(str[start:end])
      self.dirty = bool(self.dirty)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.length, _x.width))
      length = len(self.grid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.grid.tostring())
      _x = self
      buff.write(_struct_2h.pack(_x.zumyX, _x.zumyY))
      length = len(self.objLstx)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.objLstx.tostring())
      length = len(self.objLsty)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.objLsty.tostring())
      _x = self
      buff.write(_struct_B2d.pack(_x.dirty, _x.foundX, _x.foundY))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.length, _x.width,) = _struct_2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.grid = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.grid = map(bool, self.grid)
      _x = self
      start = end
      end += 4
      (_x.zumyX, _x.zumyY,) = _struct_2h.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.objLstx = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.objLsty = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 17
      (_x.dirty, _x.foundX, _x.foundY,) = _struct_B2d.unpack(str[start:end])
      self.dirty = bool(self.dirty)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B2d = struct.Struct("<B2d")
_struct_2h = struct.Struct("<2h")
_struct_2i = struct.Struct("<2i")

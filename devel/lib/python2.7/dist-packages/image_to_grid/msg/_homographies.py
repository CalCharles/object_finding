# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from image_to_grid/homographies.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class homographies(genpy.Message):
  _md5sum = "e3b0945bcd6fa0c0d74e5f6a102c0551"
  _type = "image_to_grid/homographies"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32[] floorX
int32[] floorY
int32[] objectX
int32[] objectY
int8 size 
float32 intervalSize #should be 1/3 * the size of a tile

"""
  __slots__ = ['floorX','floorY','objectX','objectY','size','intervalSize']
  _slot_types = ['int32[]','int32[]','int32[]','int32[]','int8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       floorX,floorY,objectX,objectY,size,intervalSize

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(homographies, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.floorX is None:
        self.floorX = []
      if self.floorY is None:
        self.floorY = []
      if self.objectX is None:
        self.objectX = []
      if self.objectY is None:
        self.objectY = []
      if self.size is None:
        self.size = 0
      if self.intervalSize is None:
        self.intervalSize = 0.
    else:
      self.floorX = []
      self.floorY = []
      self.objectX = []
      self.objectY = []
      self.size = 0
      self.intervalSize = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.floorX)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.floorX))
      length = len(self.floorY)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.floorY))
      length = len(self.objectX)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.objectX))
      length = len(self.objectY)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.objectY))
      _x = self
      buff.write(_struct_bf.pack(_x.size, _x.intervalSize))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.floorX = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.floorY = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.objectX = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.objectY = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 5
      (_x.size, _x.intervalSize,) = _struct_bf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.floorX)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.floorX.tostring())
      length = len(self.floorY)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.floorY.tostring())
      length = len(self.objectX)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.objectX.tostring())
      length = len(self.objectY)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.objectY.tostring())
      _x = self
      buff.write(_struct_bf.pack(_x.size, _x.intervalSize))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.floorX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.floorY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.objectX = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.objectY = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 5
      (_x.size, _x.intervalSize,) = _struct_bf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_bf = struct.Struct("<bf")
